#!/usr/bin/env python3
# ./run install | ./run test | ./run <url_file>

import json
import subprocess
import sys
import time
from pathlib import Path

from model_audit_cli.metrics.net_score import NetScore
from model_audit_cli.metrics_engine import compute_all_metrics, flatten_to_ndjson
from model_audit_cli.models import Metrics
from model_audit_cli.url_handler import URLHandler
from model_audit_cli.utils import reorder_top_level_like_json


# ---- helpers ----
def cmd_install() -> int:
    """
    Install project dependencies.
    Input: None
    Output: exit code 0 if install succeeded, raises error otherwise
    """
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
    try:
        # primary path for your repo now
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-e", ".[dev]"])
    except subprocess.CalledProcessError:
        # legacy fallbacks to stay compatible with teammates
        req = Path("requirements.txt")
        if req.exists():
            subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", str(req)])
        else:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pytest", "pytest-cov"])
    print("install ok")
    return 0

def _run_pytest() -> int:
    """
    Run pytest with coverage and store XML reports.
    Input: None 
    Output: int - pytest return code (0 = all tests passed, nonzero = failure).
    """
    Path("tests").mkdir(parents=True, exist_ok=True)
    junit = "tests/_junit.xml"
    cov   = "tests/_coverage.xml"
    cmd = [
        "python3", "-m", "pytest",
        f"--junitxml={junit}",
        "--cov=src",                     # works with your src/ layout
        f"--cov-report=xml:{cov}",
        "-q",
    ]
    print("[test] running:", " ".join(cmd), file=sys.stderr())
    return subprocess.run(cmd, check=False).returncode

def _print_summary(pytest_rc: int) -> None:
    """
    Parse JUnit and coverage XML reports and print a summary.
    Input: pytest_rc (int)
    Output: None
    """
    import xml.etree.ElementTree as ET
    junit = Path("tests/_junit.xml"); cov = Path("tests/_coverage.xml")
    total = passed = 0; pct = 0
    try:
        root = ET.parse(junit).getroot()
        suites = [root] if root.tag == "testsuite" else list(root.findall("testsuite")) or list(root)
        total = sum(int(s.attrib.get("tests", 0)) for s in suites)
        failed = sum(int(s.attrib.get("failures", 0)) + int(s.attrib.get("errors", 0)) for s in suites)
        passed = max(0, total - failed)
    except Exception:
        print("0/0 test cases passed. 0% line coverage achieved."); sys.exit(1)
    try:
        croot = ET.parse(cov).getroot()
        if croot.attrib.get("line-rate") is not None:
            pct = round(float(croot.attrib["line-rate"]) * 100)
    except Exception:
        pass
    print(f"{passed}/{total} test cases passed. {pct}% line coverage achieved.")
    sys.exit(0 if (pytest_rc == 0 and cov.exists()) else 1)

def is_model_url(u: str) -> bool:
    """
    Check if a URL looks like a Hugging Face model URL.
    Input: URL string
    Output: bool - True if URL is a model, False otherwise.
    """
    return ("huggingface.co" in u) and ("/datasets/" not in u)

def cmd_urls_file(url_file: str) -> int:
    """
    Read a URL file and print NDJSON lines for each model URL.
    Input: url_file (str) 
    Output: one JSON line per model URL.
    """
    p = Path(url_file)
    if not p.exists():
        print(f"File not found: {url_file}", file=sys.stderr); return 2
    url_handler = URLHandler()
    models = url_handler.get_models(url_file)
    for i, model in enumerate(models):
        if i > 0 and not model.dataset:
            model.dataset = url_handler.check_for_shared_dataset(model, models[i - 1])
        t0 = time.time()
        results = compute_all_metrics(model)
        t1 = time.time()
        net_score = NetScore()
        net_score.evaluate(list(results.values()))
        net_score.latency_ms = int(round(t1 - t0) * 1000)
        results[net_score.name] = net_score
        ndjson = flatten_to_ndjson(results)
        ndjson["name"] = model.model._repo_id.split("/")[1]
        ndjson["category"] = "MODEL"
        ndjson = reorder_top_level_like_json(ndjson, "tests/golden/metrics.ndjson")

        print(json.dumps(ndjson))

    return 0

# ---- simple “parser” ----
if len(sys.argv) < 2:
    print("Usage: ./run install | ./run test | ./run <url_file>", file=sys.stderr); sys.exit(2)

arg = sys.argv[1]
if arg == "install":
    sys.exit(cmd_install())
elif arg == "test":
    rc = _run_pytest()
    _print_summary(rc)
else:
    sys.exit(cmd_urls_file(arg))
